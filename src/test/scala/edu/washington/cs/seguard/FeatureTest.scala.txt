package edu.washington.cs.seguard

//import edu.washington.cs.seguard.{BetterDot, Conditions, Config, GraphBackend, NodeType, SootOptionManager, Util}
import edu.washington.cs.seguard.Util.Lang
import edu.washington.cs.seguard.core.FlowGraph
import org.junit.Test
import soot.Scene
import org.junit.Assert._

class FeatureTest {
//  def testNode(dot: BetterDot, lang: Util.Lang, nodeType: NodeType.Value, nodeName: String): Unit = {
//    assertTrue(dot.getNodes.toString, dot.getNodes.contains(nodeName))
//    assertEquals(dot.nodeTypes.get(nodeName).toString, dot.nodeTypes.get(nodeName), Some(nodeType))
//  }
//
//  def runAnalysisOnTestResource(): BetterDot = {
//    val config = Config.load("src/test/resources/config.yaml")
//    val conditions = new Conditions("SourcesAndSinks.txt", config)
//    val dot = new BetterDot(GraphBackend.DOT(), conditions)
//    val flowGraph = new FlowGraph(conditions, null, dot, config)
//    SootOptionManager.Manager().buildOptionTest()
//    Scene.v.loadNecessaryClasses()
//    flowGraph.Main()
//    assertEquals(dot.getNodes.toString, dot.getNodes.size, 11)
//    dot
//  }
//
//  @Test def testFeatures(): Unit = {
//    val dot = runAnalysisOnTestResource()
//    testNode(dot, Lang.JAVA, NodeType.METHOD, "<Test: void <clinit>()>")
//  }
}
